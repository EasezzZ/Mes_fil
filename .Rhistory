for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
StepTbl[33,]
coef(step.day)
for (day in 1:365){
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(step.day.lower1)
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
}
write.csv( StepTbl , file=paste(outdir,"/Daily_lm_stats.txt",sep=""))
write.csv( StepTbl , file=paste(outdir,"/Daily_lm_stats.csv",sep=""))
write.csv( StepTbl , file=paste(outdir,"/Daily_lm_stats_",region,".csv",sep=""))
day = 91
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(step.day.lower1)
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
step.day$model
summary(step.day)
prediction(step.day)
step.day$fitted.values
lm (Para.day$PM~step.day$fitted.values)
plot (Para.day$PM~step.day$fitted.values)
day = 32
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(step.day.lower1)
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
for (day in 1:365){
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(summary(step.day.lower1))
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
}
day = 32
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(summary(step.day.lower1))
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
step.day$coefficients
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(summary(step.day))
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
plot(PM~TEMP,Para.day)
for (day in 1:365){
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(summary(step.day))
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
}
for (day in 1:365){
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(summary(step.day))
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
StepTbl$DayofYear[day] <- day
StepTbl$Month <- as.POSIXlt(as.Date(day-1,origin))$mon+1
StepTbl$Day <- as.POSIXlt(as.Date(day-1,origin))$mday
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
}
write.csv( StepTbl , file=paste(outdir,"/Daily_lm_stats_",region,".csv",sep=""))
Stepcols[4:length(Stepcols)]
Stepcols[4:]
step.stat  <- matrix(data=0,nrow=3,ncol=length(Stepcols)-3)
colnames(step.stat) <- Stepcols[4:length(Stepcols)]
rownames(step.stat) <- c("count","mean","meanabs")
step.stat=as.data.frame(step.stat)
for (col in 1:(length(Stepcols)-3)){
step.stat[1,col] <- length(which(StepTbl[,col+3] != 0))
step.stat[2,col] <- mean(which(StepTbl[,col+3] != 0))
step.stat[2,col] <- mean(abs(which(StepTbl[,col+3] != 0)))
}
step.stat
step.stat  <- matrix(data=0,nrow=3,ncol=length(Stepcols)-3)
colnames(step.stat) <- Stepcols[4:length(Stepcols)]
rownames(step.stat) <- c("count","mean","meanabs")
step.stat=as.data.frame(step.stat)
for (col in 1:(length(Stepcols)-3)){
step.stat[1,col] <- length(which(StepTbl[,col+3] != 0))
step.stat[2,col] <- mean(which(StepTbl[,col+3] != 0))
step.stat[3,col] <- mean(abs(which(StepTbl[,col+3] != 0)))
}
print(step.stat)
for (col in 1:(length(Stepcols)-3)){
step.stat[1,col] <- length(which(StepTbl[,col+3] != 0))
step.stat[2,col] <- mean( StepTbl[which( StepTbl[,col+3] != 0 ), col+3] )
step.stat[3,col] <- mean( abs(StepTbl[which (StepTbl[,col+3] != 0 ), col+3] ) )
}
print(step.stat)
model.day.num = 0 #count day number with valid model
for (day in 1:365){
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
model.day.num ++
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(summary(step.day))
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
StepTbl$DayofYear[day] <- day
StepTbl$Month <- as.POSIXlt(as.Date(day-1,origin))$mon+1
StepTbl$Day <- as.POSIXlt(as.Date(day-1,origin))$mday
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
}
model.day.num = 0 #count day number with valid model
for (day in 1:365){
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
model.day.num = model.day.num+1
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(summary(step.day))
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
StepTbl$DayofYear[day] <- day
StepTbl$Month <- as.POSIXlt(as.Date(day-1,origin))$mon+1
StepTbl$Day <- as.POSIXlt(as.Date(day-1,origin))$mday
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
}
write.csv( StepTbl , file=paste(outdir,"/Daily_lm_stats_",region,".csv",sep=""))
print(model.day.num)
step.stat  <- matrix(data=0,nrow=4,ncol=length(Stepcols)-3)
colnames(step.stat) <- Stepcols[4:length(Stepcols)]
rownames(step.stat) <- c("count","countratio","mean","meanabs")
step.stat=as.data.frame(step.stat)
for (col in 1:(length(Stepcols)-3)){
step.stat[1,col] <- length(which(StepTbl[,col+3] != 0))
step.stat[2,col] <- length(which(StepTbl[,col+3] != 0))/model.day.num
step.stat[3,col] <- mean( StepTbl[which( StepTbl[,col+3] != 0 ), col+3] )
step.stat[4,col] <- mean( abs(StepTbl[which (StepTbl[,col+3] != 0 ), col+3] ) )
}
print(step.stat)
which(which(StepTbl$R2 == 0 & StepTbl$AIC))
which(which(StepTbl$R2 == 0 & StepTbl$AIC != 0))
(which(StepTbl$R2 == 0 & StepTbl$AIC != 0))
day = 67
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
model.day.num = model.day.num+1
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.lower,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower))
print("==============step.day.lower1===============")
print(summary(step.day))
StepTbl$AIC[day] <- extractAIC(step.day)[2]
StepTbl$R2[day]  <- summary(step.day)$r.square
StepTbl$DayofYear[day] <- day
StepTbl$Month <- as.POSIXlt(as.Date(day-1,origin))$mon+1
StepTbl$Day <- as.POSIXlt(as.Date(day-1,origin))$mday
if ( step.day$rank  > 1 ) {
for (pnum in 2: (step.day$rank)){
StepTbl[day,colnames(StepTbl) == (colnames(step.day$model)[pnum])] <- coef(step.day)[pnum]
}
}
}
day67 <- subset ( ParaTb, DayofYear == 67)
day67 <- subset ( ParaTbl, DayofYear == 67)
day67
plot(PM~AOD,day67)
summary(lm(PM~AOD,day67))
summary(lm(PM~AOD+AOD,day67))
summary(lm(PM~AOD+rh,day67))
summary(lm(PM~AOD+RH,day67))
summary(lm(PM~AOD+PBL,day67))
summary(lm(PM~AOD+PBL+RH,day67))
summary(lm(PM~AOD+PBL+RH+TEMP,day67))
write.csv( StepTbl , file=paste(outdir,"/Predictor_select_stats_",region,".csv",sep=""))
write.csv( step.stat , file=paste(outdir,"/Predictor_select_stats_",region,".csv",sep=""))
select.predictor.ind <- which(step.stat[2,] > 0.5 )
print("=============selected predictors============")
print(colnames(step.stat)[select.predictor.ind])
select.predictor.ind <- which(step.stat[2,] > 0.4 )
print("=============selected predictors============")
print(colnames(step.stat)[select.predictor.ind])
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
?step
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('D:/1.科研/2.BJ_PM2.5/4.结果/stage15_24h/code/Predictor_Selection/LM_daily_prediction_selection.R', encoding='UTF-8')
select.predictor.ind <- which(step.stat[2,] > 0.4 )
print("=============selected predictors============")
print(colnames(step.stat)[select.predictor.ind])
select.predictor.ind <- which(step.stat[2,] >= 0.4 )
print("=============selected predictors============")
print(colnames(step.stat)[select.predictor.ind])
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
select.predictor.ind <- which(step.stat[2,] >= 0.5 )
print("=============selected predictors============")
print(colnames(step.stat)[select.predictor.ind])
step.day
step.day <- stepAIC(lm.day.upper,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower),trace=TRUE)
day = 56
model.day.num = model.day.num+1
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
summary(lm.day.upper)
summary(lm.day.lower)
lm.day.lower <- lm(PM~1,Para.day)
step.day <- stepAIC(lm.day.upper,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower),trace=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD+NO2,Para.day)
summary(lm.day.upper)
day
Para.day
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD+NO2,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
lm.day.upper
summary(lm.day.upper)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('D:/1.科研/2.BJ_PM2.5/4.结果/stage15_24h/code/Predictor_Selection/LM_daily_prediction_selection.R', encoding='UTF-8')
50000/60/60
2564/365
2564/366
2562/366
2492/7
source.with.encoding('D:/1.科研/2.BJ_PM2.5/4.结果/stage15_24h/code/Predictor_Selection/LM_daily_prediction_selection.R', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('D:/1.科研/2.BJ_PM2.5/4.结果/stage15_24h/code/Predictor_Selection/LM_daily_prediction_selection.R', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
#library(nlme)
library(RNetCDF)
library(epiR)
library(nlme)
library(MASS)
regions <- c("BTH","YRD_Expand","PRD")
region <- regions[2]
print(c("====================",region,"==================================="))
#==========Region domain parameters ===================
corner_cor <- matrix(0,nrow=2,ncol=3)
colnames(corner_cor) <- c("BTH","YRD_Expand","PRD")
rownames(corner_cor) <- c("xllcorner","yllcorner")
corner_cor <- as.data.frame(corner_cor)
corner_cor$BTH <- c(113.4,35.7)
corner_cor$YRD_Expand <- c(118.3,29.1)
corner_cor$PRD <- c(111.3,21.5)
resolution <- 0.1
plotlim <- matrix(0,nrow=12,ncol=3)
colnames(plotlim) <- c("BTH","YRD_Expand","PRD")
rownames(plotlim) <- c("spxlimmin","spxlimmax","spylimmin","spylimmax","texlimmin","texlimmax","teylimmin","teylimmax","splgdx","splgdy","telgdx","telgdy")
plotlim <- as.data.frame(plotlim)
plotlim$BTH         <- c( 20 , 160 , 20 , 160 , 0 , 500 , 0 , 500 , 3.5 , 150 , -30 , 475 )
plotlim$YRD_Expand  <- c( 20 , 100 , 20 , 100 , 0 , 300 , 0 , 300 , 15 , 90 , -30 , 275 )
plotlim$PRD         <- c( 20 , 70 , 20 , 70 , 0 , 150 , 0 , 150 , 15 , 65 , -20 , 145 )
#==========Final Prediction Equation===================
#BTH: PM2.5 ~ AOD + PBL + TEMP + RH+ NO2
#YRD: PM2.5 ~ AOD + RH + WSPD + PBL + NO2
#PRD: PM2.5 ~ AOD + RH + TEMP + NO2
#=========================Setting Path===============================
#WORKING DIRECTORY
fatherdir <- "D:/1.科研/2.BJ_PM2.5/4.结果/stage15_24h"
codedir <- "D:/1.科研/2.BJ_PM2.5/4.结果/stage15_24h/code/Predictor_Selection"
LUdir <- "D:/1.科研/2.BJ_PM2.5/4.结果/stage12_plot_3region/netCDF"
Vardir <- "D:/1.科研/2.BJ_PM2.5/4.结果/stage15_24h/netCDF"
outdir <- paste(fatherdir,"Predictor_Selection",sep="/")
#creat dir
if (!file.exists(outdir)) {
dir.create(path = outdir,recursive = TRUE)
}
setwd(codedir)
#Read netCDF storing 3h_avg measurement
PMCoor_File <- paste(Vardir,"/",region,"_PM25_Coor_2013_24h.nc",sep="")
if (region == "BTH"){
PMCoor_File <- paste(Vardir,"/",region,"_PM25_Coor_2013_24h_filter.nc",sep="")
}
AOD_File    <- paste(Vardir,"/",region,"_fusedAOD_2013.nc",sep="")
MET_File    <- paste(Vardir,"/",region,"_filMET_2013_24h.nc",sep="")
DEM_File    <- paste(LUdir,"/",region,"_DEM01d.nc",sep="")
NO2_File    <- paste(LUdir,"/",region,"_NO2Column2013.nc",sep="")
Mask_File   <- paste(LUdir,"/",region,"_Mask.nc",sep="")
#----------------------Read input parameters-------------------------
PMCoor_ID <- open.nc(PMCoor_File)
AOD_ID    <- open.nc(AOD_File)
MET_ID    <- open.nc(MET_File)
DEM_ID    <- open.nc(DEM_File)
NO2_ID    <- open.nc(NO2_File)
MASK_ID   <- open.nc(Mask_File)
PM       <- var.get.nc(PMCoor_ID,'PM25')           # ug/m3
#PMAnnual <- var.get.nc(PMCoor_ID,'PMAVGAQUA')          # ug/m3  #Calculate PMAnnual after PM filtering
Siteinfo <- var.get.nc(PMCoor_ID,'SITECOOR')
RH       <- var.get.nc(MET_ID,'RH')                    # %
PBL      <- var.get.nc(MET_ID,'PBL')                   # km
WSPD     <- var.get.nc(MET_ID,'WSPD')                  # m/s
TEMP     <- var.get.nc(MET_ID,'TEMP') - 273            # K     -> celisus degree
DEM      <- var.get.nc(DEM_ID,'DEM01d')/1000           # m     -> km
NO2      <- var.get.nc(NO2_ID,'NO2')                   # 10^15 molecules/cm2
Mask     <- var.get.nc(MASK_ID,'mask')
#set AOD type as input data
atype <- "fusedAOD"
AOD <- var.get.nc(AOD_ID,atype)
#----------------filtering PM2.5 measurements anomalies--------------------
PM_fil = array(0,c(dim(PM)))
for(day in 1:365){
PMDaily <- PM[,,day]
dayind <- which(PMDaily >0 )
daycount <- length(dayind)
dailysum <- sum(PMDaily[dayind])
if (daycount >6 ){
for(site in 1:daycount){
if (PMDaily[dayind[site]] > (4*dailysum/(daycount+3))){
PMDaily[dayind[site]] = 0
}
}
}
PM_fil[,,day] <- PMDaily
}
valid_PMfil_num <- length(which(PM_fil > 0))
PM <- PM_fil
#calculate PMAnnual
PMAnnual <- rowSums(PM,dims = 2)/rowSums(PM > 0,dims = 2)
#----------calculate lon and lat index of monitoring grids------------------
gridind <- which(PMAnnual>0)
gridlatind = floor((gridind-1)/dim(PM)[1])+1
gridlonind = 1+(gridind-1)%%dim(PM)[1]
#----------------Calculate number of PM-AOD Pair-------------------------
rowcount = 0
for(day in 1:365){
AODDaily <- AOD[,,day]
PMDaily <- PM[,,day]
dayind <- which(AODDaily>0 & PMDaily >0 )
daycount <- length(dayind)
if (daycount > 6){
rowcount <- rowcount+daycount
}
}
#-------------Create Matrix to store PM-AOD Pair------------------------
Tblrowcount <- rowcount
Tblcols <- c("DayofYear","Month","Day","PM","AOD","RH","PBL","TEMP","WSPD","DEM","NO2")
ParaTbl <- matrix(data=0,nrow=Tblrowcount,ncol=length(Tblcols))
colnames(ParaTbl) <- Tblcols
ParaTbl=as.data.frame(ParaTbl)
origin="2013-01-01"
#store measured pm2.5 at predicting days everyday
ModelMesSum <- matrix(0,dim(AOD)[1],dim(AOD)[2])
ModelMesnod <- matrix(0,dim(AOD)[1],dim(AOD)[2])
rowcount <- 1
for(day in 1:365){
AODDaily <- AOD[,,day]
PMDaily <- PM[,,day]
RHDaily <- RH[,,day]
PBLDaily <- PBL[,,day]
WSPDDaily <- WSPD[,,day]
TEMPDaily <- TEMP[,,day]
dayind = which(AODDaily>0 & PMDaily >0 )
daycount = length(dayind)
if (daycount > 6){
#for calculation of scaling factor by IDW
ModelMesnod[dayind] <-  ModelMesnod[dayind]+1
ModelMesSum[dayind] <- ModelMesSum[dayind]+PMDaily[dayind]
ParaTbl$DayofYear[rowcount:(rowcount-1+daycount)] <- rep(day,daycount)
ParaTbl$Month[rowcount:(rowcount-1+daycount)]     <- as.POSIXlt(as.Date(day-1,origin))$mon+1
ParaTbl$Day[rowcount:(rowcount-1+daycount)]       <- as.POSIXlt(as.Date(day-1,origin))$mday
ParaTbl$PM[rowcount:(rowcount-1+daycount)]        <- PMDaily[dayind]
ParaTbl$AOD[rowcount:(rowcount-1+daycount)]       <- AODDaily[dayind]
ParaTbl$RH[rowcount:(rowcount-1+daycount)]        <- RHDaily[dayind]
ParaTbl$PBL[rowcount:(rowcount-1+daycount)]       <- PBLDaily[dayind]
ParaTbl$WSPD[rowcount:(rowcount-1+daycount)]      <- WSPDDaily[dayind]
ParaTbl$TEMP[rowcount:(rowcount-1+daycount)]      <- TEMPDaily[dayind]
ParaTbl$DEM[rowcount:(rowcount-1+daycount)]       <- DEM[dayind]
ParaTbl$NO2[rowcount:(rowcount-1+daycount)]       <- NO2[dayind]
rowcount <- rowcount+daycount
}
}
Steprowcount <- 365
Stepcols <- c("DayofYear","Month","Day","AOD","RH","PBL","TEMP","WSPD","R2","AIC")
StepTbl <- matrix(data=0,nrow=Steprowcount,ncol=length(Stepcols))
colnames(StepTbl) <- Stepcols
StepTbl=as.data.frame(StepTbl)
origin="2013-01-01"
#######Forward/Backward from null model (i.e. 'lm.day.lower')
#Forward/Backward from full model (i.e. 'lm.day.upper')
model.day.num = 0 #count day number with valid model
day = 32
if ( length( which(ParaTbl$DayofYear==day ) ) > 0){
model.day.num = model.day.num+1
Para.day <- subset(ParaTbl,DayofYear == day)
lm.day.upper <- lm(PM~AOD+TEMP+RH+PBL+WSPD,Para.day)
lm.day.lower <- lm(PM~1,Para.day)
#lm.day.aod <- lm(PM~AOD,Para.day)
step.day <- stepAIC(lm.day.upper,direction = "both", scope = list(upper = lm.day.upper, lower = lm.day.lower),trace=FALSE)
#print("==============step.day===============")
#print(summary(step.day))
}
summary(step.day)
drop1(step.day)
summary(lm(PM~AOD+TEMP+PBL+WSPD,Para.day))
summary(lm(PM~TEMP+PBL+WSPD,Para.day))
